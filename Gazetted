from selenium import webdriver
from Login import MainLogin
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException


class Gazetted(MainLogin):
    automationPrefixText = '[Automation-Script] '

    def __init__(self):
        self.driver = webdriver.Chrome(executable_path=r"C:\chromedriver\chromedriver.exe")
        self.login()
        self.viewGazett()
        # self.createGazett()
        self.searchGazette()

    def viewGazett(self):
        self.driver.find_element_by_xpath("/html/body/aside/section/ul/li[4]/a/span[1]").click()
        self.driver.find_element_by_xpath("/html/body/aside/section/ul/li[4]/ul/li[5]/a").click()
        elem = self.driver.find_element_by_id("gazetted-holiday-list_wrapper").text
        print(elem)

    # def createGazett(self):
    #     self.driver.find_element_by_xpath("/html/body/aside/section/ul/li[4]/a/span[1]").click()
    #     self.driver.find_element_by_xpath("/html/body/aside/section/ul/li[4]/ul/li[5]/a").click()
    #     self.driver.find_element_by_id("start_date").click()
    #     self.driver.find_element_by_id("start_date").send_keys("10/19/2018")
    #     self.driver.find_element_by_id("end_date").click()
    #     self.driver.find_element_by_id("end_date").send_keys("10/19/2018")
    #     self.driver.find_element_by_xpath("/html/body/main/div/section/div[1]/div[2]/form/div[3]/div/input").send_keys("Test holiday")
    #     self.driver.find_element_by_xpath("/html/body/main/div/section/div[1]/div[2]/form/button[2]").click()
    #     timeout = 10
    #     try:
    #         element_present = EC.presence_of_element_located((By.ID, 'element_id'))
    #         WebDriverWait(self.driver, timeout).until(element_present)
    #     except TimeoutException:
    #         print
    #         "Timed out waiting for page to load"
    #     response_message = self.driver.find_element_by_xpath("/html/body/main/div/section/div[1]").text
    #
    #     if response_message == "Gazatted holidays have been stored successfully":
    #         print("Holiday created successfully")
    #     else:
    #         print(response_message)
    #     self.assertTrue('Test holiday' in self.driver.page_source)

    def searchGazette(self):
        search_box = "searchbox"
        self.driver.find_element_by_id(search_box).send_keys("automation")
        gazetted_table = "gazetted-holiday-list"
        # check = self.driver.find_element_by_id(gazetted_table).text
        element = self.driver.find_element_by_id("gazetted-holiday-list_wrapper").text
        assert element = 
        # assert "automation holiday" not in self.driver.page_source
        # body_text = self.driver.find_elements_by_id(gazetted_table)
        # self.assertEqual('automation holiday' in body_text, 'Not found')

        self.driver.find_element_by_css_selector()


gazetted = Gazetted()
